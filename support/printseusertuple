#!/bin/bash

declare PATHTOFUNCTIONSRELATIVETODSSP="support/functions"

usage () {
	echo "$0 - prints default seuser tuple or seuser tuple specified by user name

mandatory options

-p	: path to dssp source
-s	: path to seusers file relative to dssp source
-u	: user name to match

discretionary options

-d	: enable debugging

exit codes

0	: success
1	: general fault
193	: file is not accessible
194	: file is not readable
195	: file is a zero-byte file
205	: no seuser tuple to list"
	exit
}

! (( $# > 0 )) && usage || :

while (( $# > 0 ))
do
	case $1 in
		\-p)
		shift

		if ! (( $# > 0 ))
		then
			printf "%s\n" "option -p expects one parameter: path to dssp source"

			exit
		fi

		PATHTODSSP=$1
		;;
		\-s)
		shift

		if ! (( $# > 0 ))
		then
			printf "%s\n" "option -s expects one parameter: path to seusers file relative to dssp source"

			exit
		fi

		PATHTOSEUSERSFILERELATIVETOSOURCE=$1
		;;
		\-u)
		shift

		if ! (( $# > 0 ))
		then
			printf "%s\n" "option -u expects one parameter: username to match"

			exit
		fi

		USERNAME=$1
		;;
		\-d)

		DEBUG=1
		;;
		*)

		break
		;;
		esac
	shift
done

if ! [[ -d $PATHTODSSP ]] || [[ -z $PATHTODSSP ]] || [[ -z $PATHTOSEUSERSFILERELATIVETOSOURCE ]]
then
	usage
fi

if ! [[ -r ${PATHTODSSP}/${PATHTOFUNCTIONSRELATIVETODSSP} ]]
then
	printf "%s\n" "unable to source functions"

	exit 1
fi

source ${PATHTODSSP}/${PATHTOFUNCTIONSRELATIVETODSSP} 2>/dev/null

filetestandresult -f ${PATHTODSSP}/${PATHTOSEUSERSFILERELATIVETOSOURCE}

retval=`echo $?`

! [[ $retval == 0 ]] && exit `echo $retval`

filetestandresult -r ${PATHTODSSP}/${PATHTOSEUSERSFILERELATIVETOSOURCE}

retval=`echo $?`

! [[ $retval == 0 ]] && exit `echo $retval`

filetestandresult -s ${PATHTODSSP}/${PATHTOSEUSERSFILERELATIVETOSOURCE}

retval=`echo $?`

! [[ $retval == 0 ]] && exit `echo $retval`

if [[ -z $USERNAME ]]
then
	DEFAULTSEUSER="`/bin/grep ^__default__ ${PATHTODSSP}/${PATHTOSEUSERSFILERELATIVETOSOURCE} | /bin/awk -F ":" '{ print $2 }' 2>/dev/null`"

	retval=`echo $?`

	DEFAULTSEUSERPREFIX="`printf "%s\n" "$DEFAULTSEUSER" | /bin/cut -s -f1 -d. 2>/dev/null`"

	retval=`echo $?`

	if [[ -z $DEFAULTSEUSER ]]
	then
		debug "no default seuser found in ${PATHTODSSP}/${PATHTOSEUSERSFILERELATIVETOSOURCE}"

		exit 1

	elif [[ -n $DEFAULTSEUSERPREFIX ]]
	then
		if [[ $DEFAULTSEUSER == ${DEFAULTSEUSERPREFIX}.id ]]
		then
			printf "%s\n" "${DEFAULTSEUSER}:${DEFAULTSEUSERPREFIX}.role"
		else
			debug "unable to determine valid default user tuple"

			exit 1
		fi

	elif [[ -z $DEFAULTSEUSERPREFIX ]]
	then

		ALTERNATEDEFAULTSEUSERPREFIX="`printf "%s\n" "$DEFAULTSEUSER" | /bin/awk -F "_u"$ '{ print $1 }' 2>/dev/null`"

		retval=`echo $?`

		if [[ $DEFAULTSEUSER == ${ALTERNATEDEFAULTSEUSERPREFIX}_u ]]
		then
			printf "%s\n" "${DEFAULTSEUSER}:${ALTERNATEDEFAULTSEUSERPREFIX}_r"
		else
			debug "unable to determine valid default user tuple"

			exit 1
		fi
	fi

elif [[ -n $USERNAME ]]
then
	SEUSER="`/bin/grep ^"$USERNAME" ${PATHTODSSP}/${PATHTOSEUSERSFILERELATIVETOSOURCE} | /bin/awk -F ":" '{ print $2 }' 2>/dev/null`"

	retval=`echo $?`

        SEUSERPREFIX="`printf "%s\n" "$SEUSER" | /bin/cut -s -f1 -d. 2>/dev/null`"

	retval=`echo $?`

	if [[ -z $SEUSER ]]
	then
		debug "no seuser found in ${PATHTODSSP}/${PATHTOSEUSERSFILERELATIVETOSOURCE} for $USERNAME"

		exit 205

	elif [[ -n $SEUSERPREFIX ]]
	then
		if [[ $SEUSER == ${SEUSERPREFIX}.id ]]
		then
			printf "%s\n" "${SEUSER}:${SEUSERPREFIX}.role"
		else
			debug "unable to determine valid user tuple for $USERNAME"

			exit 1
		fi

	elif [[ -z $SEUSERPREFIX ]]
	then
		ALTERNATESEUSERPREFIX="`printf "%s\n" "$SEUSER" | /bin/awk -F "_u"$ '{ print $1 }' 2>/dev/null`"

		retval=`echo $?`

		if [[ $SEUSER == ${ALTERNATESEUSERPREFIX}_u ]]
		then
			printf "%s\n" "${SEUSER}:${ALTERNATESEUSERPREFIX}_r"
		else
			debug "unable to determine valid user tuple for $USERNAME"

			exit 1
		fi
	fi
fi

exit `echo $retval`
#EOF
