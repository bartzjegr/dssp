#!/bin/bash

declare PATHTOFUNCTIONSRELATIVETODSSP="support/functions"
declare PATHTOLOGINDEFS="/etc/login.defs"
declare PATHTOSHELLS="/etc/shells"

usage () {
	echo "$0 - prints a list with real user names

mandatory options

-p	: path to dssp source

discretionary options

-d	: enable debugging

exit codes

0	: success
1	: general fault
193	: file is not accessible
194	: file is not readable
195	: file is a zero-byte file
204	: no real users to list"
	exit
}

! (( $# > 0 )) && usage || :

while (( $# > 0 ))
do
	case $1 in
		\-p)
		shift

		if ! (( $# > 0 ))
		then
			printf "%s\n" "option -p expects one parameter: path to dssp source"

			exit
		fi

		PATHTODSSP=$1
		;;
		\-d)

		DEBUG=1
		;;
		*)

		break
		;;
		esac
	shift
done

if [[ -z $PATHTODSSP ]] || ! [[ -d $PATHTODSSP ]] || ! [[ -x /bin/getent ]]
then
	usage
fi

if ! [[ -r ${PATHTODSSP}/${PATHTOFUNCTIONSRELATIVETODSSP} ]]
then
	debug "unable to source functions"

	exit 1
fi

source ${PATHTODSSP}/${PATHTOFUNCTIONSRELATIVETODSSP} 2>/dev/null

filetestandresult -f $PATHTOLOGINDEFS

retval=`echo $?`

! [[ $retval == 0 ]] && exit `echo $retval`

filetestandresult -r $PATHTOLOGINDEFS

retval=`echo $?`

! [[ $retval == 0 ]] && exit `echo $retval`

filetestandresult -s $PATHTOLOGINDEFS

retval=`echo $?`

! [[ $retval == 0 ]] && exit `echo $retval`

UID_MAX="`/bin/grep ^UID_MAX $PATHTOLOGINDEFS | /bin/awk -F" " '{ print $2 }' 2>/dev/null`"

retval=`echo $?`

if [[ $UID_MAX =~ "^[0-9]+$" ]]
then
	debug "invalid max uid: $UID_MAX"

	exit 1
fi

UID_MIN="`/bin/grep ^UID_MIN $PATHTOLOGINDEFS | /bin/awk -F" " '{ print $2 }' 2>/dev/null`"

retval=`echo $?`

if [[ $UID_MIN =~ "^[0-9]+$" ]]
then
	debug "invalid min uid: $UID_MIN"

	exit 1
fi

filetestandresult -f $PATHTOSHELLS

retval=`echo $?`

! [[ $retval == 0 ]] && exit `echo $retval`

filetestandresult -r $PATHTOSHELLS

retval=`echo $?`

! [[ $retval == 0 ]] && exit `echo $retval`

filetestandresult -s $PATHTOSHELLS

retval=`echo $?`

! [[ $retval == 0 ]] && exit `echo $retval`

LOGINSHELLS+=(`/bin/grep -v nologin $PATHTOSHELLS 2>/dev/null`)

retval=`echo $?`

if [[ -z $LOGINSHELLS ]]
then
	debug "no login shells found"

	exit 1
fi

IFS=$'\n'

for ENTRY in `/bin/getent passwd`
do
	ID="`printf "%s\n" "$ENTRY" | /bin/awk -F ":" '{ print $3 }' 2>/dev/null`"

	if ! [[ $ID -lt $UID_MIN ]] && ! [[ $ID -gt $UID_MAX ]] && [[ $ID -ne 0 ]]
	then
		UNAME="`printf "%s\n" "$ENTRY" | /bin/awk -F ":" '{ print $1 }' 2>/dev/null`"

		retval=`echo $?`

		if [[ -z $UNAME ]]
		then
			debug "unable to determine login name for $ENTRY"

			exit 1
		fi

                USHELL="`printf "%s\n" "$ENTRY" | /bin/awk -F ":" '{ print $7 }' 2>/dev/null`"

		retval=`echo $?`

		if [[ -z $USHELL ]]
		then
			debug "unable to determine login shell for $ENTRY"

			exit 1
		fi

                unset _HSHELL

		for LOGINSHELL in ${LOGINSHELLS[@]}
		do
			[[ $LOGINSHELL == $USHELL ]] && _HSHELL=1
		done

		if ! [[ $_HSHELL == 1 ]]
		then
			debug "invalid shell $USHELL for $UNAME in $ENTRY"

			exit 1
		fi

                UHOME="`printf "%s\n" "$ENTRY" | /bin/awk -F ":" '{ print $6 }' 2>/dev/null`"

		retval=`echo $?`

		filetestandresult -d $UHOME

		retval=`echo $?`

		! [[ $retval == 0 ]] && exit `echo $retval`

		UNAMES+=($UNAME)
	fi
done

if [[ -z $UNAMES ]]
then
	debug "no real users to list"

	exit 204

elif [[ -n $UNAMES ]]
then
	printf "%s\n" "${UNAMES[@]}"
fi

exit `echo $retval`
#EOF
